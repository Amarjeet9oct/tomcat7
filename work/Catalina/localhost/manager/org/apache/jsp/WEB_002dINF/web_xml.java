/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.90
 * Generated at: 2020-03-26 23:56:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class web_xml extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n");
      out.write("<!--\n");
      out.write(" Licensed to the Apache Software Foundation (ASF) under one or more\n");
      out.write("  contributor license agreements.  See the NOTICE file distributed with\n");
      out.write("  this work for additional information regarding copyright ownership.\n");
      out.write("  The ASF licenses this file to You under the Apache License, Version 2.0\n");
      out.write("  (the \"License\"); you may not use this file except in compliance with\n");
      out.write("  the License.  You may obtain a copy of the License at\n");
      out.write("\n");
      out.write("      http://www.apache.org/licenses/LICENSE-2.0\n");
      out.write("\n");
      out.write("  Unless required by applicable law or agreed to in writing, software\n");
      out.write("  distributed under the License is distributed on an \"AS IS\" BASIS,\n");
      out.write("  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n");
      out.write("  See the License for the specific language governing permissions and\n");
      out.write("  limitations under the License.\n");
      out.write("-->\n");
      out.write("\n");
      out.write("<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n");
      out.write("  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n");
      out.write("  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n");
      out.write("                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n");
      out.write("  version=\"3.0\"\n");
      out.write("  metadata-complete=\"true\">\n");
      out.write("\n");
      out.write("  <display-name>Tomcat Manager Application</display-name>\n");
      out.write("  <description>\n");
      out.write("    A scriptable management web application for the Tomcat Web Server;\n");
      out.write("    Manager lets you view, load/unload/etc particular web applications.\n");
      out.write("  </description>\n");
      out.write("\n");
      out.write("  <servlet>\n");
      out.write("    <servlet-name>Manager</servlet-name>\n");
      out.write("    <servlet-class>org.apache.catalina.manager.ManagerServlet</servlet-class>\n");
      out.write("    <init-param>\n");
      out.write("      <param-name>debug</param-name>\n");
      out.write("      <param-value>2</param-value>\n");
      out.write("    </init-param>\n");
      out.write("  </servlet>\n");
      out.write("  <servlet>\n");
      out.write("    <servlet-name>HTMLManager</servlet-name>\n");
      out.write("    <servlet-class>org.apache.catalina.manager.HTMLManagerServlet</servlet-class>\n");
      out.write("    <init-param>\n");
      out.write("      <param-name>debug</param-name>\n");
      out.write("      <param-value>2</param-value>\n");
      out.write("    </init-param>\n");
      out.write("    <!-- Uncomment this to show proxy sessions from the Backup manager or a\n");
      out.write("         StoreManager in the sessions list for an application\n");
      out.write("    <init-param>\n");
      out.write("      <param-name>showProxySessions</param-name>\n");
      out.write("      <param-value>true</param-value>\n");
      out.write("    </init-param>\n");
      out.write("    -->\n");
      out.write("    <multipart-config>\n");
      out.write("      <!-- 50MB max -->\n");
      out.write("      <max-file-size>52428800</max-file-size>\n");
      out.write("      <max-request-size>52428800</max-request-size>\n");
      out.write("      <file-size-threshold>0</file-size-threshold>\n");
      out.write("    </multipart-config>\n");
      out.write("  </servlet>\n");
      out.write("  <servlet>\n");
      out.write("    <servlet-name>Status</servlet-name>\n");
      out.write("    <servlet-class>org.apache.catalina.manager.StatusManagerServlet</servlet-class>\n");
      out.write("    <init-param>\n");
      out.write("      <param-name>debug</param-name>\n");
      out.write("      <param-value>0</param-value>\n");
      out.write("    </init-param>\n");
      out.write("  </servlet>\n");
      out.write("\n");
      out.write("  <servlet>\n");
      out.write("    <servlet-name>JMXProxy</servlet-name>\n");
      out.write("    <servlet-class>org.apache.catalina.manager.JMXProxyServlet</servlet-class>\n");
      out.write("  </servlet>\n");
      out.write("\n");
      out.write("  <!-- Define the Manager Servlet Mapping -->\n");
      out.write("  <servlet-mapping>\n");
      out.write("    <servlet-name>Manager</servlet-name>\n");
      out.write("      <url-pattern>/text/*</url-pattern>\n");
      out.write("  </servlet-mapping>\n");
      out.write("  <servlet-mapping>\n");
      out.write("    <servlet-name>Status</servlet-name>\n");
      out.write("    <url-pattern>/status/*</url-pattern>\n");
      out.write("  </servlet-mapping>\n");
      out.write("  <servlet-mapping>\n");
      out.write("    <servlet-name>JMXProxy</servlet-name>\n");
      out.write("      <url-pattern>/jmxproxy/*</url-pattern>\n");
      out.write("  </servlet-mapping>\n");
      out.write("  <servlet-mapping>\n");
      out.write("    <servlet-name>HTMLManager</servlet-name>\n");
      out.write("    <url-pattern>/html/*</url-pattern>\n");
      out.write("  </servlet-mapping>\n");
      out.write("\n");
      out.write("  <filter>\n");
      out.write("    <filter-name>SetCharacterEncoding</filter-name>\n");
      out.write("    <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>\n");
      out.write("    <init-param>\n");
      out.write("      <param-name>encoding</param-name>\n");
      out.write("      <param-value>UTF-8</param-value>\n");
      out.write("    </init-param>\n");
      out.write("  </filter>\n");
      out.write("\n");
      out.write("  <filter-mapping>\n");
      out.write("    <filter-name>SetCharacterEncoding</filter-name>\n");
      out.write("    <url-pattern>/*</url-pattern>\n");
      out.write("  </filter-mapping>\n");
      out.write("\n");
      out.write("  <filter>\n");
      out.write("    <filter-name>CSRF</filter-name>\n");
      out.write("    <filter-class>org.apache.catalina.filters.CsrfPreventionFilter</filter-class>\n");
      out.write("    <init-param>\n");
      out.write("      <param-name>entryPoints</param-name>\n");
      out.write("      <param-value>/html,/html/,/html/list,/index.jsp</param-value>\n");
      out.write("    </init-param>\n");
      out.write("  </filter>\n");
      out.write("\n");
      out.write("  <filter-mapping>\n");
      out.write("    <filter-name>CSRF</filter-name>\n");
      out.write("    <servlet-name>HTMLManager</servlet-name>\n");
      out.write("  </filter-mapping>\n");
      out.write("\n");
      out.write("  <!-- Define a Security Constraint on this Application -->\n");
      out.write("  <!-- NOTE:  None of these roles are present in the default users file -->\n");
      out.write("  <security-constraint>\n");
      out.write("    <web-resource-collection>\n");
      out.write("      <web-resource-name>HTML Manager interface (for humans)</web-resource-name>\n");
      out.write("      <url-pattern>/html/*</url-pattern>\n");
      out.write("    </web-resource-collection>\n");
      out.write("    <auth-constraint>\n");
      out.write("       <role-name>manager-gui</role-name>\n");
      out.write("    </auth-constraint>\n");
      out.write("  </security-constraint>\n");
      out.write("  <security-constraint>\n");
      out.write("    <web-resource-collection>\n");
      out.write("      <web-resource-name>Text Manager interface (for scripts)</web-resource-name>\n");
      out.write("      <url-pattern>/text/*</url-pattern>\n");
      out.write("    </web-resource-collection>\n");
      out.write("    <auth-constraint>\n");
      out.write("       <role-name>manager-script</role-name>\n");
      out.write("    </auth-constraint>\n");
      out.write("  </security-constraint>\n");
      out.write("  <security-constraint>\n");
      out.write("    <web-resource-collection>\n");
      out.write("      <web-resource-name>JMX Proxy interface</web-resource-name>\n");
      out.write("      <url-pattern>/jmxproxy/*</url-pattern>\n");
      out.write("    </web-resource-collection>\n");
      out.write("    <auth-constraint>\n");
      out.write("       <role-name>manager-jmx</role-name>\n");
      out.write("    </auth-constraint>\n");
      out.write("  </security-constraint>\n");
      out.write("  <security-constraint>\n");
      out.write("    <web-resource-collection>\n");
      out.write("      <web-resource-name>Status interface</web-resource-name>\n");
      out.write("      <url-pattern>/status/*</url-pattern>\n");
      out.write("    </web-resource-collection>\n");
      out.write("    <auth-constraint>\n");
      out.write("       <role-name>manager-gui</role-name>\n");
      out.write("       <role-name>manager-script</role-name>\n");
      out.write("       <role-name>manager-jmx</role-name>\n");
      out.write("       <role-name>manager-status</role-name>\n");
      out.write("    </auth-constraint>\n");
      out.write("  </security-constraint>\n");
      out.write("\n");
      out.write("  <!-- Define the Login Configuration for this Application -->\n");
      out.write("  <login-config>\n");
      out.write("    <auth-method>BASIC</auth-method>\n");
      out.write("    <realm-name>Tomcat Manager Application</realm-name>\n");
      out.write("  </login-config>\n");
      out.write("\n");
      out.write("  <!-- Security roles referenced by this web application -->\n");
      out.write("  <security-role>\n");
      out.write("    <description>\n");
      out.write("      The role that is required to access the HTML Manager pages\n");
      out.write("    </description>\n");
      out.write("    <role-name>manager-gui</role-name>\n");
      out.write("  </security-role>\n");
      out.write("  <security-role>\n");
      out.write("    <description>\n");
      out.write("      The role that is required to access the text Manager pages\n");
      out.write("    </description>\n");
      out.write("    <role-name>manager-script</role-name>\n");
      out.write("  </security-role>\n");
      out.write("  <security-role>\n");
      out.write("    <description>\n");
      out.write("      The role that is required to access the HTML JMX Proxy\n");
      out.write("    </description>\n");
      out.write("    <role-name>manager-jmx</role-name>\n");
      out.write("  </security-role>\n");
      out.write("  <security-role>\n");
      out.write("    <description>\n");
      out.write("      The role that is required to access to the Manager Status pages\n");
      out.write("    </description>\n");
      out.write("    <role-name>manager-status</role-name>\n");
      out.write("  </security-role>\n");
      out.write("\n");
      out.write("  <error-page>\n");
      out.write("    <error-code>401</error-code>\n");
      out.write("    <location>/WEB-INF/jsp/401.jsp</location>\n");
      out.write("  </error-page>\n");
      out.write("  <error-page>\n");
      out.write("    <error-code>403</error-code>\n");
      out.write("    <location>/WEB-INF/jsp/403.jsp</location>\n");
      out.write("  </error-page>\n");
      out.write("  <error-page>\n");
      out.write("    <error-code>404</error-code>\n");
      out.write("    <location>/WEB-INF/jsp/404.jsp</location>\n");
      out.write("  </error-page>\n");
      out.write("\n");
      out.write("</web-app>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
